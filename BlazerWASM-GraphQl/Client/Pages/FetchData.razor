@page "/fetchdata"
@using BlazerWASM_GraphQl.Shared
@using shared
@using shared.Data
@using shared.models
@inject HttpClient Http
@inject GraphqlService GraphqlOps;

<PageTitle>Weather forecast</PageTitle>

<div>
    <h1>Weather forecast</h1>

    <p>This component demonstrates fetching data from the server.</p>

    @if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<div>
    @if(users == null)
    {
        <p>GraphQL data loading ... </p>
    }
    else
    {
        <p>GraphQl data:</p>

        @foreach(ApplicationUser user in users.Data.FetchUsers)
        {
            <p>
                @user.Name
            </p>
        }
    }
</div>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        await FetchUsers();
    }

    #region FetchUsers
    private GraphQL.GraphQLResponse<ApplicationUsersData> users;

    private async Task FetchUsers()
    {
        users = await GraphqlOps.FetchApplicationUsers();
    } 
    #endregion
}
